cbuild-run:
  generated-by: csolution version 2.9.0
  solution: hello.csolution.yml
  target-type: LPCXpresso55S69
  target-set: <default>
  compiler: AC6
  board: NXP::LPCXpresso55S69
  board-pack: NXP::LPCXpresso55S69_BSP@19.0.0
  device: NXP::LPC55S69JBD100
  device-pack: NXP::LPC55S69_DFP@16.1.0
  output:
    - file: out/hello/LPCXpresso55S69/Debug/hello.axf
      info: generate by hello.Debug+LPCXpresso55S69
      type: elf
      load: symbols
      pname: cm33_core0
    - file: out/hello/LPCXpresso55S69/Debug/hello.hex
      info: generate by hello.Debug+LPCXpresso55S69
      type: hex
      load: image
      pname: cm33_core0
  system-resources:
    memory:
      - name: BootROM
        access: rx
        start: 0x03000000
        size: 0x00020000
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: BootROM_alias
        access: rx
        start: 0x13000000
        size: 0x00020000
        alias: BootROM
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: PROGRAM_FLASH
        access: rx
        start: 0x00000000
        size: 0x0009D800
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: PROGRAM_FLASH_alias
        access: rw
        start: 0x10000000
        size: 0x0009D800
        alias: PROGRAM_FLASH
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: SRAM
        access: rw
        start: 0x20000000
        size: 0x00040000
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: SRAM4
        access: rw
        start: 0x20040000
        size: 0x00004000
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: SRAM4_alias
        access: rw
        start: 0x30040000
        size: 0x00004000
        alias: SRAM4
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: SRAMX
        access: rw
        start: 0x04000000
        size: 0x00008000
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: SRAMX_alias
        access: rw
        start: 0x14000000
        size: 0x00008000
        alias: SRAMX
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: SRAM_alias
        access: rw
        start: 0x30000000
        size: 0x00040000
        alias: SRAM
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: USB_RAM
        access: rw
        start: 0x40100000
        size: 0x00004000
        from-pack: NXP::LPC55S69_DFP@16.1.0
      - name: USB_RAM_alias
        access: rw
        start: 0x50100000
        size: 0x00004000
        alias: USB_RAM
        from-pack: NXP::LPC55S69_DFP@16.1.0
  system-descriptions:
    - file: ${CMSIS_PACK_ROOT}/NXP/LPC55S69_DFP/16.1.0/LPC55S69_cm33_core0.xml
      type: svd
      pname: cm33_core0
    - file: ${CMSIS_PACK_ROOT}/NXP/LPC55S69_DFP/16.1.0/LPC55S69_cm33_core1.xml
      type: svd
      pname: cm33_core1
    - file: ${CMSIS_PACK_ROOT}/ARM/CMSIS-RTX/5.8.0/RTX5.scvd
      type: scvd
  debugger:
    name: CMSIS-DAP@pyOCD
    protocol: swd
    clock: 5000000
    dbgconf: .cmsis/hello+LPCXpresso55S69.dbgconf
    start-pname: cm33_core0
    gdbserver:
      - port: 3333
        pname: cm33_core0
      - port: 3334
        pname: cm33_core1
  debug-vars:
    vars: |
      // Debug Access Variables, can be modified by user via copies of DBGCONF files as created by uVision. Also see sub-family level.
      __var SWO_Pin               = 0;                    // Serial Wire Output pin: 0 = PIO0_10, 1 = PIO0_8
      __var Dbg_CR                = 0x00000000;           // DBG_CR
      __var BootTime              = 10000;                // 10 milliseconds
  debug-sequences:
    - name: DebugDeviceUnlock
      blocks:
        - execute: |
            Sequence("DebugDeviceUnlockCore0");
      pname: cm33_core0
    - name: ResetCatchSet
      blocks:
        - execute: |
            Sequence("ResetCatchSetCore0");
      pname: cm33_core0
    - name: ResetSystem
      blocks:
        - execute: |
            Sequence("ResetSystemCore0");
      pname: cm33_core0
    - name: ResetProcessor
      pname: cm33_core0
    - name: DebugDeviceUnlock
      pname: cm33_core1
    - name: ResetCatchSet
      blocks:
        - execute: |
            Sequence("ResetCatchSetCore1");
      pname: cm33_core1
    - name: ResetSystem
      pname: cm33_core1
    - name: ResetProcessor
      blocks:
        - execute: |
            Sequence("ResetProcessorCore1");
      pname: cm33_core1
    - name: EnableTraceClk
      blocks:
        - execute: |
            __var SYSCON_NS_Base_Addr = 0x40000000;
            __var IOCON_NS_Base_Addr  = 0x40001000;
            __var TRACECLKSEL_Addr    = SYSCON_NS_Base_Addr + 0x268;
            __var TRACECLKDIV_Addr    = SYSCON_NS_Base_Addr + 0x308;
            __var AHBCLKCTRLSET0_Addr = IOCON_NS_Base_Addr  + 0x220;
            __var clksel              = 0;
            __var clkdiv              = 0;
        - if: __traceout & 0x3
          blocks:
            - execute: |
                clksel = Read32(TRACECLKSEL_Addr);  // Read current TRACECLKSEL value
            - info: Trace (TPIU) Clock not selected?
              if: clksel > 2
              execute: |
                Write32(TRACECLKSEL_Addr, 0x0);   // Select Trace divided clock
            - execute: |
                clkdiv = (Read32(TRACECLKDIV_Addr) & 0xFF);  // Read current TRACECLKDIV value, preserve divider but clear rest to enable
                Write32(TRACECLKDIV_Addr, clkdiv);

                Write32(AHBCLKCTRLSET0_Addr, (1 << 13));   // Enable IOCON clock
    - name: EnableDebugMailbox
      blocks:
        - execute: |
            __var status=0x55aa;
            Message(0, "LPC55xx connect script start");

            // Read APIDR
            __dp = 0;
            __ap = 2;
            status = ReadAP(0xFC);
            Message(0, "APIDR: 0x%08X", status);

            // Read DPIDR
            __dp = 0;
            __ap = 2;
            status = ReadDP(0x0);
            Message(0, "DPIDR: 0x%08X", status);

            // Active DebugMailbox
            __dp = 0;
            __ap = 2;
            WriteAP(0x0, 0x00000021);
            DAP_Delay(30000);
            ReadAP(0x0);

            // Enter Debug Session
            __dp = 0;
            __ap = 2;
            WriteAP(0x4, 0x00000007);
            DAP_Delay(30000);
            ReadAP(0x0);

            __dp = 0;
            __ap = 0;

            Message(0, "LPC55xx connect script end");
    - name: DebugPortStart
      blocks:
        - execute: |
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0
            WriteDP(DP_SELECT, 0x00000000);

            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
        - if: powered_down
          blocks:
            - execute: |
                // Request Debug/System Power-Up
                WriteDP(DP_CTRL_STAT, 0x50000000);
            - while: (ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000
              timeout: 1000000
            - if: (__protocol & 0xFFFF) == 2
              execute: |
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);

                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);

                Sequence("EnableDebugMailbox");
    - name: DebugDeviceUnlockCore0
      blocks:
        - info: Trace output via TPIU selected
          if: __traceout & 0x3
          execute: |
            Sequence("EnableTraceClk");       // Enable trace clock to enable TPIU register accesses
    - name: ResetCatchSetCore0
      blocks:
        - execute: |
            __var SCS_Addr    = 0xE000E000;
            __var DHCSR_Addr  = SCS_Addr + 0xDF0;
            __var DEMCR_Addr  = SCS_Addr + 0xDFC;
            __var resetVector = 0xFFFFFFFF;                                    // Reset Vector
            __var resetVector_Addr = 0x00000004;

            Write32(0xE000EDFC, Read32(DEMCR_Addr) & (~0x00000001));       // Clear Reset Vector Catch

            Write32(0x40034010, 0x00000000);                                   // Program Flash Word Start Address to 0x0 to read reset vector (STARTA)
            Write32(0x40034014, 0x00000000);                                   // Program Flash Word Stop Address to 0x0 to read reset vector (STOPA)
            Write32(0x40034080, 0x00000000);                                   // DATAW0: Prepare for read
            Write32(0x40034084, 0x00000000);                                   // DATAW1: Prepare for read
            Write32(0x40034088, 0x00000000);                                   // DATAW2: Prepare for read
            Write32(0x4003408C, 0x00000000);                                   // DATAW3: Prepare for read
            Write32(0x40034090, 0x00000000);                                   // DATAW4: Prepare for read
            Write32(0x40034094, 0x00000000);                                   // DATAW5: Prepare for read
            Write32(0x40034098, 0x00000000);                                   // DATAW6: Prepare for read
            Write32(0x4003409C, 0x00000000);                                   // DATAW7: Prepare for read

            Write32(0x40034FE8, 0x0000000F);                                   // Clear FLASH Controller Status (INT_CLR_STATUS)
            Write32(0x40034000, 0x00000003);                                   // Read single Flash Word (CMD_READ_SINGLE_WORD)
        - info: Wait for flash word read to finish
          while: (Read32(0x40034FE0) & 0x00000004) == 0
          timeout: 100000
        - info: No Error reading Flash Word with Reset Vector
          if: (Read32(0x40034FE0) & 0xB) == 0
          blocks:
            - if: ((Read32(0x400ACFFC) & 0xC) != 0x8) || ((Read32(0x400ACFF8) & 0xC) != 0x8)
              execute: |
                // ENABLE_SECURE_CHECKING is set to restrictive mode, access secure addresses
                resetVector_Addr = 0x10000004;
            - execute: |
                // Lowest flash page readable, read via AHB (flash controller for some reason returns garbage)
                resetVector = Read32(resetVector_Addr);                                // Read Reset Vector (Address 0x00000004)
        - info: Breakpoint on user application reset vector
          if: resetVector != 0xFFFFFFFF
          execute: |
            Write32(0xE0002008, resetVector|1);                              // Program FPB Comparator 0 with reset handler address
            Write32(0xE0002000, 0x00000003);                                 // Enable FPB
        - info: Enable reset vector catch
          if: resetVector == 0xFFFFFFFF
          execute: |
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) | 0x00000001));          // Enable Reset Vector Catch in DEMCR
        - execute: |
            // Read DHCSR to clear potentially set DHCSR.S_RESET_ST bit
            Read32(DHCSR_Addr);
    - name: ResetCatchSetCore1
      blocks:
        - execute: |
            // Use DEMCR.VC_CORERESET for CPU1
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;
            __var value      = 0;

            // Enable Reset Vector Catch in DEMCR
            value = Read32(DEMCR_Addr);
            Write32(DEMCR_Addr, (value | 0x00000001));
            // Read DHCSR to clear potentially set DHCSR.S_RESET_ST bit
            Read32(DHCSR_Addr);
    - name: ResetCatchClear
      blocks:
        - execute: |
            __var DEMCR_Addr = 0xE000EDFC;

            // Clear FPB Comparators 0 and 1
            Write32(0xE0002008, 0x00000000);

            // Disable FPB
            Write32(0xE0002000, 0x00000002);

            // Clear Reset Vector Catch
            Write32(DEMCR_Addr, Read32(DEMCR_Addr) & (~0x00000001));
    - name: WaitForStopAfterReset
      blocks:
        - execute: |
            __var SCS_Addr    = 0xE000E000;
            __var DHCSR_Addr  = SCS_Addr + 0xDF0;
            __var ap0_disable=0x55aa;

            // Give bootloader time to do what it needs to do
            DAP_Delay(BootTime);  // try 10ms

            // Read AP0 CSW
            __dp = 0;
            __ap = 0;
            ap0_disable = ReadAP(0x0);
            ap0_disable = ((ap0_disable & 0x40) == 0);
            Message(0, "AP0 DIS: %x", ap0_disable);
        - if: ap0_disable
          execute: |
            Sequence("EnableDebugMailbox");
        - while: (Read32(DHCSR_Addr) & 0x02000000)
          timeout: 500000
        - if: (Read32(DHCSR_Addr) & 0x00020000) == 0
          execute: |
            Write32(DHCSR_Addr, 0xA05F0003);  // Force halt until finding a proper catch. Probably works better from flash.
    - name: ResetHardware
      blocks:
        - execute: |
            __var nReset      = 0x80;
            __var canReadPins = 0;
            __var SCS_Addr    = 0xE000E000;
            __var DHCSR_Addr  = SCS_Addr + 0xDF0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
        - while: 1
          timeout: 50000
        - if: canReadPins
          blocks:
            - while: (DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0
              timeout: 1000000
        - if: "!canReadPins"
          blocks:
            - execute: |
                // Assert nRESET line
                DAP_SWJ_Pins(nReset, nReset, 0);
            - while: 1
              timeout: 100000
        - if: (__connection & (1 << 17)) == 0
          execute: |
            Sequence("WaitForStopAfterReset");
    - name: ResetSystemCore0
      blocks:
        - execute: |
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;

            __errorcontrol = 1;

            // Execute SYSRESETREQ via AIRCR
            Write32(AIRCR_Addr, 0x05FA0004);

            __errorcontrol = 0;

            // Give bootloader time to do what it needs to do
            DAP_Delay(BootTime);  // try 10ms
        - execute: |
            Sequence("WaitForStopAfterReset");
    - name: ResetProcessorCore1
      blocks:
        - execute: |
            __var SYSCON_NS_Base_Addr = 0x40000000;
            __var CPUCTRL_Addr        = SYSCON_NS_Base_Addr + 0x800;
            __var value               = 0;
            __var apOrg               = __ap;

            __ap = 0;                           // Switch to CPU0 AP to drive CPU1 reset via CPUCTRL register

            value      = Read32(CPUCTRL_Addr);  // Read CPUCTRL Register
            value &= 0x0000FFFF;            // Preserve previous settings
            value     |= 0xC0C40000;            // Set key value
            value     |= 0x00000028;            // Set CPU1CLKEN and CPU1RSTEN
            Write32(CPUCTRL_Addr, value);       // Put CPU1 into reset

            value &= ~0x00000020;           // Clear CPU1RSTEN
            Write32(CPUCTRL_Addr, value);       // Release CPU1 from reset

            __ap = apOrg;
    - name: TraceStart
      blocks:
        - info: SWO Trace output selected
          if: __traceout & 0x1
          blocks:
            - execute: |
                Sequence("EnableTraceClk");       // Enable and configure trace clock
            - info: SWO via PIO0_10
              if: SWO_Pin == 0
              execute: |
                Write32(0x40001028, 0x00000046); // Configure PIO0_10: FUNC - 6, MODE - 0, SLEW - 1, INVERT - 0, DIGMODE - 0, OD - 0
            - info: SWO via PIO0_8
              if: SWO_Pin == 1
              execute: |
                Write32(0x40001020, 0x00000044); // Configure PIO0_10: FUNC - 4, MODE - 0, SLEW - 1, INVERT - 0, DIGMODE - 0, OD - 0
  programming:
    - algorithm: ${CMSIS_PACK_ROOT}/NXP/LPC55S69_DFP/16.1.0/arm/LPC55XX_640.FLM
      start: 0x00000000
      size: 0x00098000
      ram-start: 0x20000000
      ram-size: 0x00001000
    - algorithm: ${CMSIS_PACK_ROOT}/NXP/LPC55S69_DFP/16.1.0/arm/LPC55XX_S_640.FLM
      start: 0x10000000
      size: 0x00098000
      ram-start: 0x20000000
      ram-size: 0x00001000
  debug-topology:
    debugports:
      - dpid: 0
        accessports:
          - apid: 0
            index: 0
          - apid: 1
            index: 1
    processors:
      - pname: cm33_core0
        apid: 0
      - pname: cm33_core1
        apid: 1
    swj: true
